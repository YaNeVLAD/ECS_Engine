namespace Engine::ecs
{

template <typename _TComponent>
inline void ComponentArray<_TComponent>::AddComponent(Entity entity, _TComponent const& component)
{
	assert(!HasComponent(entity) && "Component already exists for this entity");

	const auto index = entity.Index();

	if (index >= m_sparse.size())
	{
		m_sparse.resize(index + 1, InvalidIndex);
	}

	const size_t denseIndex = m_components.size();
	m_sparse[index] = denseIndex;
	m_denseToEntity.push_back(entity);
	m_components.push_back(component);
}

template <typename _TComponent>
inline void ComponentArray<_TComponent>::RemoveComponent(Entity entity)
{
	if (!HasComponent(entity))
	{
		return;
	}

	const auto indexToRemove = entity.Index();
	const size_t denseIndexOfRemoved = m_sparse[indexToRemove];

	_TComponent& lastComponent = m_components.back();
	Entity lastEntity = m_denseToEntity.back();

	if constexpr (std::movable<_TComponent>)
	{
		m_components[denseIndexOfRemoved] = std::move(lastComponent);
	}
	else
	{
		m_components[denseIndexOfRemoved] = lastComponent;
	}
	m_denseToEntity[denseIndexOfRemoved] = lastEntity;

	m_sparse[lastEntity.Index()] = denseIndexOfRemoved;

	m_sparse[indexToRemove] = InvalidIndex;

	m_components.pop_back();
	m_denseToEntity.pop_back();
}

template <typename _TComponent>
inline _TComponent& ComponentArray<_TComponent>::GetComponent(Entity entity)
{
	assert(HasComponent(entity) && "Entity does not have component of this type");
	return m_components[m_sparse[entity.Index()]];
}

template <typename _TComponent>
inline _TComponent const& ComponentArray<_TComponent>::GetComponent(Entity entity) const
{
	return const_cast<ComponentArray&>(*this).GetComponent(entity);
}

template <typename _TComponent>
inline bool ComponentArray<_TComponent>::HasComponent(Entity entity) const
{
	const auto index = entity.Index();
	return index < m_sparse.size()
		&& m_sparse[index] != InvalidIndex
		&& m_denseToEntity[m_sparse[index]] == entity;
}

template <typename _TComponent>
inline std::vector<_TComponent>& ComponentArray<_TComponent>::GetComponents()
{
	return m_components;
}

template <typename _TComponent>
inline void ComponentArray<_TComponent>::OnEntityDestroyed(Entity entity)
{
	if (HasComponent(entity))
	{
		RemoveComponent(entity);
	}
}

} // namespace ecs
