namespace ecs
{

template <typename _TComponent>
inline void ComponentArray<_TComponent>::AddComponent(Entity entity, _TComponent const& component)
{
	assert(!m_entityToIndex.contains(entity)
		&& "Can't add multiple components of the same type");

	ComponentIndex newIndex = m_components.size();
	m_entityToIndex[entity] = newIndex;
	m_indexToEntity[newIndex] = entity;

	m_components.push_back(component);
}

template <typename _TComponent>
inline void ComponentArray<_TComponent>::RemoveComponent(Entity entity)
{
	assert(m_entityToIndex.contains(entity)
		&& "Entity does not have component to remove");

	size_t removedIndex = m_entityToIndex.at(entity);
	size_t lastIndex = m_components.size() - 1;

	if constexpr (std::movable<_TComponent>)
	{
		m_components[removedIndex] = std::move(m_components[lastIndex]);
	}
	else
	{
		m_components[removedIndex] = m_components[lastIndex];
	}

	Entity lastEntity = m_indexToEntity.at(lastIndex);
	m_entityToIndex[lastEntity] = removedIndex;
	m_indexToEntity[removedIndex] = lastEntity;

	m_entityToIndex.erase(entity);
	m_indexToEntity.erase(lastEntity);
	m_components.pop_back();
}

template <typename _TComponent>
inline _TComponent& ComponentArray<_TComponent>::GetComponent(Entity entity)
{
	assert(m_entityToIndex.contains(entity)
		&& "Entity does not have component of this type");

	return m_components[m_entityToIndex.at(entity)];
}

template <typename _TComponent>
inline _TComponent const& ComponentArray<_TComponent>::GetComponent(Entity entity) const
{
	return const_cast<ComponentArray&>(*this).GetComponent(entity);
}

template <typename _TComponent>
inline bool ComponentArray<_TComponent>::HasComponent(Entity entity) const
{
	return m_entityToIndex.contains(entity);
}

template <typename _TComponent>
inline auto ComponentArray<_TComponent>::GetComponents()
{
	return std::views::all(m_components);
}

template <typename _TComponent>
inline auto ComponentArray<_TComponent>::GetComponents() const
{
	return std::views::all(m_components);
}

template <typename _TComponent>
inline void ComponentArray<_TComponent>::OnEntityDestroyed(Entity entity)
{
	if (m_entityToIndex.contains(entity))
	{
		RemoveComponent(entity);
	}
}

}