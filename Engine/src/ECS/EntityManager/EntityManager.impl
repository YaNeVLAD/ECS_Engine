#include "EntityManager.h"
namespace Engine::ecs
{

[[nodiscard]] inline Entity EntityManager::CreateEntity()
{
	std::size_t index;

	if (!m_availableIndices.empty())
	{
		index = m_availableIndices.front();
		m_availableIndices.pop();
	}
	else
	{
		index = m_nextEntityIndex++;
	}

	if (index >= m_generations.size())
	{
		m_generations.resize(index + 1, 0);
		m_signatures.resize(index + 1);
		m_entityLocations.resize(index + 1);
	}

	Entity entity = ecs::CreateEntity(index, m_generations[index]);

	m_signatures[entity.Index()].reset();

	m_activeEntities.push_back(entity);
	m_entityLocations[entity.Index()] = m_activeEntities.size() - 1;

	return entity;
}

inline void EntityManager::DestroyEntity(Entity entity)
{
	if (!IsValid(entity))
	{
		return;
	}

	const std::size_t index = entity.Index();

	m_generations[index]++;

	size_t indexOfRemoved = m_entityLocations[index];
	Entity lastEntity = m_activeEntities.back();

	m_activeEntities[indexOfRemoved] = lastEntity;
	m_entityLocations[lastEntity.Index()] = indexOfRemoved;
	m_activeEntities.pop_back();

	m_signatures[index].reset();
	m_availableIndices.push(index);
}

inline bool EntityManager::IsValid(Entity entity) const
{
	const auto index = entity.Index();
	return index < m_generations.size() && entity.Generation() == m_generations[index];
}

inline void EntityManager::SetSignature(Entity entity, Signature const& signature)
{
	assert(IsValid(entity) && "Entity is not valid");
	m_signatures[entity.Index()] = signature;
}

inline Signature& EntityManager::GetSignature(Entity entity)
{
	assert(IsValid(entity) && "Entity is not valid");
	return m_signatures[entity.Index()];
}

inline Signature const& EntityManager::GetSignature(Entity entity) const
{
	return const_cast<EntityManager&>(*this).GetSignature(entity);
}

[[nodiscard]] inline std::vector<Entity> const& EntityManager::GetActiveEntities() const
{
	return m_activeEntities;
}

}